# -*- coding: utf-8 -*-
"""pytho_task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EDSjDn0Rw5kJiZleDcbW03IXISNjx6bv
"""

import pandas as pd
import numpy as np

dataset1 = '/content/dataset-3.csv'
df = pd.read_csv(dataset1)


def calculate_distance_matrix(dataset):
  df=pd.read_csv(dataset)
  distance_matrix = pd.pivot(data =df ,index='id_start' , columns= 'id_end' ,values='distance')
  distance_matrix = distance_matrix.fillna(0)
  # Ensure the matrix is symmetric

  return distance_matrix


d1 = calculate_distance_matrix(dataset1)
d2 = calculate_distance_matrix(dataset1).T

import pandas as pd

def calculate_distance_matrix(dataset):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset)

    # Pivot the DataFrame to create a distance matrix
    distance_matrix = df.pivot(index='id_start', columns='id_end', values='distance').fillna(0)

    # Convert distances to cumulative distances along known routes
    for col in distance_matrix.columns:
        for row in distance_matrix.index:
            if distance_matrix.at[row, col] == 0:
                continue
            for k in distance_matrix.columns:
                if distance_matrix.at[row, k] == 0:
                    continue
                if distance_matrix.at[k, col] == 0:
                    continue
                # Update the cumulative distance along known routes
                distance_matrix.at[row, col] += distance_matrix.at[row, k]

    # Ensure the matrix is symmetric
    distance_matrix = distance_matrix + distance_matrix.T - pd.DataFrame(np.diag(distance_matrix.diagonal()), index=distance_matrix.index, columns=distance_matrix.columns)

    return distance_matrix

# Example usage:
# Assuming dataset-3.csv is the path to your file

result_distance_matrix = calculate_distance_matrix(dataset1)
print(result_distance_matrix)

import pandas as pd
import numpy as np

def calculate_distance_matrix(dataset):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(dataset)

    # Pivot the DataFrame to create a distance matrix
    distance_matrix = df.pivot(index='id_start', columns='id_end', values='distance').fillna(0)

    # Convert distances to cumulative distances along known routes
    for col in distance_matrix.columns:
        for row in distance_matrix.index:
            if distance_matrix.at[row, col] == 0:
                continue
            for k in distance_matrix.columns:
                if distance_matrix.at[row, k] == 0 or k not in distance_matrix.index:
                    continue
                if distance_matrix.at[k, col] == 0 or col not in distance_matrix.index:
                    continue
                # Update the cumulative distance along known routes
                distance_matrix.at[row, col] += distance_matrix.at[row, k]

    # Ensure the matrix is symmetric

    distance_matrix1 = distance_matrix + distance_matrix.T - pd.DataFrame(np.diag(distance_matrix.values.diagonal()), index=distance_matrix.index, columns=distance_matrix.columns)

    # Reset index and columns to ensure correct shape
    distance_matrix = distance_matrix.reset_index(drop=True).rename_axis(None, axis=1)

    return distance_matrix

# Example usage:
# Assuming dataset-3.csv is the path to your file

result_distance_matrix = calculate_distance_matrix(dataset1)
print(result_distance_matrix)

